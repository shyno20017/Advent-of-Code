// Advent of Code Day 21

let input = `../.. => #.#/##./..#
#./.. => ###/.##/..#
##/.. => ..#/.#./##.
.#/#. => ###/.##/###
##/#. => ###/#.#/.##
##/## => #.#/..#/.#.
.../.../... => ..../.#../##.#/#.#.
#../.../... => .##./#.../.##./#..#
.#./.../... => ...#/.#.#/###./##.#
##./.../... => #.##/..#./.#.#/..##
#.#/.../... => ..#./.#../.#.#/###.
###/.../... => #.#./.#../.#../....
.#./#../... => ..#./##../.###/###.
##./#../... => ..#./###./#.#./#.#.
..#/#../... => ..##/###./.#.#/#...
#.#/#../... => #.../...#/.#.#/#...
.##/#../... => ###./####/.###/#.##
###/#../... => #.../#.##/#.../.#.#
.../.#./... => .##./#.#./#..#/..#.
#../.#./... => #.../##.#/#.#./.##.
.#./.#./... => ##../.###/####/....
##./.#./... => #.#./..../###./.#.#
#.#/.#./... => ..../..../#.##/.##.
###/.#./... => ####/#.##/.###/#.#.
.#./##./... => ####/#..#/#.##/.##.
##./##./... => .#.#/#.##/####/.###
..#/##./... => .##./...#/.#.#/..#.
#.#/##./... => #..#/...#/.#../.##.
.##/##./... => ##../#..#/##../..##
###/##./... => ..##/..../#.../..##
.../#.#/... => ###./#.../##.#/.#.#
#../#.#/... => ..#./...#/#..#/#.##
.#./#.#/... => ##../..#./##../###.
##./#.#/... => .#.#/#.#./####/.##.
#.#/#.#/... => .##./.##./#.##/#..#
###/#.#/... => #..#/.##./..#./##..
.../###/... => ###./#..#/.###/#.##
#../###/... => #.../#..#/####/##..
.#./###/... => ###./.##./#..#/.###
##./###/... => #..#/##../.##./#.#.
#.#/###/... => ..#./...#/#.../...#
###/###/... => ...#/##../...#/#.##
..#/.../#.. => ##.#/.#.#/.##./###.
#.#/.../#.. => ###./#..#/.#.#/#.##
.##/.../#.. => ...#/.#.#/.###/###.
###/.../#.. => .#../...#/..#./.#..
.##/#../#.. => .#../...#/.##./..#.
###/#../#.. => .###/##.#/#.##/.###
..#/.#./#.. => ##.#/##../##../#...
#.#/.#./#.. => #.../.###/#.#./#...
.##/.#./#.. => ###./#.##/###./####
###/.#./#.. => .#../..##/##.#/##.#
.##/##./#.. => ##.#/##../.##./...#
###/##./#.. => .#.#/.#../####/.##.
#../..#/#.. => ..##/###./...#/##..
.#./..#/#.. => .#../...#/.#../..##
##./..#/#.. => ###./..##/###./.##.
#.#/..#/#.. => ####/.#.#/...#/..##
.##/..#/#.. => #..#/.#../#.##/####
###/..#/#.. => .#../#.##/#.##/.#..
#../#.#/#.. => ..#./#.##/.#../.##.
.#./#.#/#.. => ##../#.../#.#./###.
##./#.#/#.. => #..#/.##./####/.#..
..#/#.#/#.. => ##.#/..#./..#./.#.#
#.#/#.#/#.. => .#../..#./..#./..##
.##/#.#/#.. => ##../#.##/#.#./#.##
###/#.#/#.. => ##.#/..##/##../##.#
#../.##/#.. => .###/####/#.##/..##
.#./.##/#.. => #.#./.##./###./#.##
##./.##/#.. => ..#./#..#/####/...#
#.#/.##/#.. => ####/.#.#/##../##.#
.##/.##/#.. => #.#./#..#/.#.#/.##.
###/.##/#.. => .#../.##./.##./.###
#../###/#.. => #..#/###./##.#/##..
.#./###/#.. => #.#./#..#/..#./#..#
##./###/#.. => ..../##.#/####/...#
..#/###/#.. => ..../#.../##../#..#
#.#/###/#.. => ..#./.#../..../##.#
.##/###/#.. => #..#/###./##.#/.###
###/###/#.. => #.../.##./#.##/.##.
.#./#.#/.#. => ...#/#.../.#../##.#
##./#.#/.#. => .#.#/#.#./.#../#.##
#.#/#.#/.#. => #.##/.##./###./....
###/#.#/.#. => ##../#..#/#.../.###
.#./###/.#. => ###./#.../.#../#..#
##./###/.#. => ##../##../#.../#...
#.#/###/.#. => ##../.#.#/#.##/#.#.
###/###/.#. => #.##/##.#/#.#./#...
#.#/..#/##. => ..../..#./####/..##
###/..#/##. => #.../...#/#.#./#.#.
.##/#.#/##. => ..##/###./.##./#...
###/#.#/##. => .#../###./##.#/...#
#.#/.##/##. => .###/##../.###/..#.
###/.##/##. => .#.#/##.#/.##./.###
.##/###/##. => ..#./.#.#/.#../#..#
###/###/##. => ###./#..#/####/...#
#.#/.../#.# => .#.#/.#../.#.#/#...
###/.../#.# => #..#/##../.#../...#
###/#../#.# => ..../.#../#.../..##
#.#/.#./#.# => #.#./####/.#.#/.##.
###/.#./#.# => ..#./####/#..#/..##
###/##./#.# => .##./.#../#.##/.#.#
#.#/#.#/#.# => ##../..##/##.#/#.#.
###/#.#/#.# => .##./#..#/#..#/.#.#
#.#/###/#.# => ..#./.###/#.##/#.##
###/###/#.# => ###./###./.#.#/###.
###/#.#/### => #.##/..##/#..#/...#
###/###/### => ...#/.#../##.#/.##.`

let test = `../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#`

Array.prototype.equals = function (array) {
  if (!array)
  return false;

  if (this.length != array.length)
  return false;

  for (var i = 0, l=this.length; i < l; i++) {
    if (this[i] instanceof Array && array[i] instanceof Array) {
      if (!this[i].equals(array[i]))
      return false;
    }
    else if (this[i] != array[i]) {
      return false;
    }
  }
  return true;
}

function getOn(data) {
  data = data.split('\n').map(current =>
    current.split(' => ')).map(current =>
      current.map(x => x.split('/'))).map(current =>
        current.map(x => x.map(y =>
          {let n = y.split('');
            return n.map(z => z === '#' ? 1 : 0);})));

  let map = [[0, 1, 0], [0, 0, 1], [1, 1, 1]];
  let iterations = 1;
  while (iterations > 0) {
    if (map.length % 2 === 0) {

    } else if (map.length % 3 === 0) {
      let n = map.length / 3;
      let squares = [];
      let newSquares = [];
      for (let i = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
          squares.push([ [map[j*n][i*n], map[j*n][i*n+1], map[j*n][i*n+2]],  [map[j*n+1][i*n], map[j*n+1][i*n+1], map[j*n+1][i*n+2]],  [map[j*n+2][i*n], map[j*n+2][i*n+1], map[j*n+2][i*n+2]] ]);
        }
      }

      for (let square of squares) {
        for (let ins of data) {
          if (testSame(square, ins[0])) {
            newSquares.push(ins[1]);
          }
        }
      }
      let newMap = [];
    } else {
      return "Oops. Something went wrong";
    }
  }
}


function flipH(a) {
  return a.map(i => {let x = i.concat();x.reverse();return x;})
}

function rotateC(a) {
  let newA = [];
  for (let j = 0; j < a.length; j++) {
    let sub = [];
    for (let i = a.length-1; i >= 0; i--) {
      sub.push(a[i][j]);
    }
    newA.push(sub);
  }
  return newA;
}

function rotateA(a) {
  return rotateC(rotateC(rotateC(a)));
}

function flipV(a) {
  let newA = a.concat();
  newA.reverse();
  return newA;
}

function testSame(a, b) {
  if (a.length !== b.length) {
    return false;
  }
  if (a.equals(b)) {
    return true;
  } else if (a.equals(rotateC(b))) {
    return true;
  } else if (a.equals(rotateC(rotateC(b)))) {
    return true;
  } else if (a.equals(rotateA(b))) {
    return true;
  } else if (a.equals(flipH(b))) {
    return true;
  } else if (a.equals(flipV(b))) {
    return true;
  } else if (a.equals(flipH(flipV(b)))) {
    return true;
  } else if (a.equals(flipH(rotateC(b)))) {
    return true;
  } else if (a.equals(flipH(rotateA(b)))) {
    return true;
  } else if (a.equals(flipV(rotateA(b)))) {
    return true;
  } else if (a.equals(flipV(rotateC(b)))) {
    return true;
  }
  return false;
}

let ans = getOn(test);
